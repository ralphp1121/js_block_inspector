const i=new Map,u=new Map,d=new Map,p=new Map,b=new Map;let a=[];const T=["doubleclick","/ads/","googletagmanager","gtm.js","analytics.js","ga.js","adservice","taboola","outbrain","pixel","track","beacon"];function I(e){try{const t=new URL(e);return`${t.protocol}//${t.hostname}${t.port?":"+t.port:""}`}catch{return}}function f(){return new Date().toISOString()}async function R(){const{buckets:e={},ignoreDomains:t=[]}=await chrome.storage.local.get(["buckets","ignoreDomains"]);Object.entries(e).forEach(([r,n])=>{u.set(r,n)}),a=t}async function k(e){const{buckets:t={}}=await chrome.storage.local.get("buckets");t[e]=u.get(e),await chrome.storage.local.set({buckets:t})}function L(e,t){const r=I(t);if(!r)return;const n=i.get(e);if(n&&n.origin===r&&u.has(n.bucketKey))return n.bucketKey;const o=`${r}|${e}|${Date.now()}`,s={startedAt:f(),origin:r,tabId:e,records:[]};return u.set(o,s),i.set(e,{origin:r,bucketKey:o}),k(o).catch(()=>{}),o}function x(e){const t={};if(e.responseHeaders)for(const r of e.responseHeaders)r.name&&(t[r.name.toLowerCase()]=Array.isArray(r.value)?r.value.join(","):r.value||"");return t}function M(e){try{return new URL(e).protocol==="http:"}catch{return!1}}function S(e){try{return new URL(e).hostname}catch{return""}}function w(e){const t=e.toLowerCase();return T.some(r=>t.includes(r))}function q(e){if(!e)return!1;const t=e.toLowerCase().split(";")[0].trim();return t==="application/javascript"||t==="text/javascript"||t==="application/x-javascript"||t==="text/ecmascript"||t==="application/ecmascript"}function y(e,t){switch(e){case"CSP":return"Update script-src in Content-Security-Policy to include the script's origin or use a nonce/hash.";case"Mixed Content":return"Load the script over HTTPS or proxy it through a secure endpoint.";case"Ad/Tracker Blocker":return"Rename the resource path or host, or serve from a neutral CDN path.";case"Network Error":return"Verify DNS/hosting/CDN availability and correct URL; check status codes and timeouts.";case"Cross-Origin/MIME":return"Serve with a JavaScript MIME type and avoid nosniff, or correct CORS/mime configuration.";default:return"Inspect DevTools console/network logs for specifics; adjust CSP, URL, or hosting as needed."}}async function m(e,t){const r=i.get(e);if(!r)return;const n=u.get(r.bucketKey);n&&(n.records.push(t),await k(r.bucketKey))}function C(e){const t=S(e);return a.some(r=>r&&t.endsWith(r))}chrome.runtime.onInstalled.addListener(()=>{R().catch(()=>{})});chrome.webNavigation.onCommitted.addListener(e=>{if(e.frameId!==0)return;const{tabId:t,url:r}=e;I(r)&&(L(t,r),b.set(t,{csp:void 0,reportTo:void 0}))});chrome.webRequest.onBeforeRequest.addListener(e=>{e.type==="script"&&(!e.tabId||e.tabId<0||C(e.url)||d.set(e.requestId,{url:e.url,tabId:e.tabId,startedAt:f()}))},{urls:["<all_urls>"],types:["script"]},["blocking"]);chrome.webRequest.onHeadersReceived.addListener(e=>{const t=x(e);if(e.type==="main_frame"){const r=t["content-security-policy"],n=t["report-to"];e.tabId>=0&&b.set(e.tabId,{csp:r,reportTo:n});return}if(e.type==="script"){const r=p.get(e.requestId)||{};r.headers=t,p.set(e.requestId,r)}},{urls:["<all_urls>"]},["responseHeaders","extraHeaders"]);chrome.webRequest.onCompleted.addListener(async e=>{if(e.type!=="script")return;const t=d.get(e.requestId);if(!t)return;const n=(p.get(e.requestId)||{headers:{}}).headers||{};e.statusCode;let o,s="";const l=(n["x-content-type-options"]||"").toLowerCase()==="nosniff",c=n["content-type"]||"";if(l&&!q(c)&&(o="Cross-Origin/MIME",s=`X-Content-Type-Options: nosniff; Content-Type: ${c||"missing"}`),!o&&(e.statusCode>=400||e.statusCode===0)&&(o="Network Error",s=`HTTP ${e.statusCode}`),!o&&w(t.url)&&(o="Ad/Tracker Blocker",s="Matched ad/tracker pattern"),!o){const g=i.get(t.tabId);g&&g.origin&&g.origin.startsWith("https:")&&M(t.url)&&(o="Mixed Content",s="HTTPS page attempted to load HTTP script")}const h=o?"blocked":"executed",v={url:t.url,reason:o||"Executed",evidence:s,suggestedFix:o?y(o):"",status:h,ts:f()};await m(t.tabId,v),d.delete(e.requestId),p.delete(e.requestId)},{urls:["<all_urls>"]});chrome.webRequest.onErrorOccurred.addListener(async e=>{if(e.type!=="script")return;const t=d.get(e.requestId);if(!t||C(t.url))return;let r="Network Error",n=e.error;(String(e.error||"").includes("ERR_BLOCKED_BY_CLIENT")||w(t.url))&&(r="Ad/Tracker Blocker",n=e.error||"Matched ad/tracker pattern");const o={url:t.url,reason:r,evidence:n,suggestedFix:y(r),status:"blocked",ts:f()};await m(t.tabId,o),d.delete(e.requestId),p.delete(e.requestId)},{urls:["<all_urls>"]});chrome.runtime.onMessage.addListener((e,t,r)=>{if(e&&e.type==="csp-violation"){const{blockedURI:n,effectiveDirective:o,originalPolicy:s,violatedDirective:l}=e.payload||{},c=t?.tab?.id;if(typeof c=="number"&&c>=0){const h={url:n||"(inline/eval)",reason:"CSP",evidence:`Violated: ${l||o}; Policy: ${s?.slice(0,300)||""}`,suggestedFix:y("CSP"),status:"blocked",ts:f()};m(c,h)}}else if(e&&e.type==="get-state"){const n=e.tabId,o={ok:!0};try{o.currentSession=i.get(n)||null}catch{}return r(o),!0}else if(e&&e.type==="set-ignore-domain"){const n=e.domain;return n&&!a.includes(n)&&(a.push(n),chrome.storage.local.set({ignoreDomains:a}).catch(()=>{})),r({ok:!0}),!0}});
